	// generated by info.scce.dime.generator.dad.AuthenticationGenerator

	package info.scce.dime.auth;

    @javax.ws.rs.Path("/auth")
	@javax.transaction.Transactional
	public class Authenticator {

		@javax.inject.Inject
		private de.ls5.dywa.generated.controller.dime__HYPHEN_MINUS__models.app.BaseUserController controller;

		@javax.ws.rs.Path("/authenticate")
		@javax.ws.rs.POST
		@javax.ws.rs.Consumes(javax.ws.rs.core.MediaType.APPLICATION_JSON)
		public javax.ws.rs.core.Response authenticate(JWTLoginData token) throws org.apache.shiro.authc.AuthenticationException {
			
			final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.BaseUser user;
			
			final de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.BaseUser searchObject = controller.createSearchObject(null);
			searchObject.setusername(token.getUsername());

			final java.util.List<de.ls5.dywa.generated.entity.dime__HYPHEN_MINUS__models.app.BaseUser> users = controller.findByProperties(searchObject);

			if (users.size() != 1) {
				throw new org.apache.shiro.authc.AuthenticationException("Identification not unique");
			}
			user = users.get(0);
			
			java.lang.String[] passwordAndSalt = user.getpassword().split(":");
			java.lang.String password = passwordAndSalt[0];
			java.lang.String salt = passwordAndSalt[1];
			
			final org.apache.shiro.authc.SimpleAuthenticationInfo sai = new org.apache.shiro.authc.SimpleAuthenticationInfo();
			sai.setPrincipals(new org.apache.shiro.subject.SimplePrincipalCollection(user.getDywaId(), DIMERealm.REALM));
			sai.setCredentials(password);
			sai.setCredentialsSalt(org.apache.shiro.util.ByteSource.Util.bytes(java.util.Base64.getDecoder().decode(salt)));
			
			final org.apache.shiro.authc.credential.HashedCredentialsMatcher matcher = new org.apache.shiro.authc.credential.HashedCredentialsMatcher();
			matcher.setHashAlgorithmName(info.scce.dime.util.Constants.AUTH_HASH_ALGORITHM);
			matcher.setHashIterations(info.scce.dime.util.Constants.AUTH_HASH_ITERATIONS);
			matcher.setStoredCredentialsHexEncoded(info.scce.dime.util.Constants.AUTH_HEX_ENCODED);

			if (matcher.doCredentialsMatch(token, sai)) {
				try {
					final com.nimbusds.jose.JWSObject jwsObject = JWTUtil.createToken(user.getDywaId(), user.getfirstName(), user.getlastName());
					final java.lang.String signedToken = JWTUtil.signToken(jwsObject);
					return javax.ws.rs.core.Response.ok(signedToken).build();
				} catch (com.nimbusds.jose.JOSEException e) {
					e.printStackTrace();
					return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.UNAUTHORIZED).build();
				}
			}
			
			return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.UNAUTHORIZED).build();
			
		}
	}
